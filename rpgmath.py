import tkinter as tk
import random

# üé≠ Classe do Personagem
class Personagem:
    def __init__(self, nome, classe):
        self.nome = nome
        self.classe = classe
        self.nivel = 1
        self.pontos = 0
        self.vida = 100
        self.forca = 10 if classe == "Guerreiro" else 5
        self.magia = 10 if classe == "Mago" else 5
        self.agilidade = 10 if classe == "Arqueiro" else 5

    def upgrade(self):
        self.nivel += 1
        self.vida += 10
        self.pontos += 5
        if self.classe == "Guerreiro":
            self.forca += 5
        elif self.classe == "Mago":
            self.magia += 5
        elif self.classe == "Arqueiro":
            self.agilidade += 5

# üßÆ Banco de Perguntas
perguntas = [
    ("Quanto √© 12 x 8?", "96"), ("Qual a raiz quadrada de 144?", "12"), ("Resolva: 5¬≤", "25"),
    ("Quanto √© 100 √∑ 4?", "25"), ("Resolva: 3¬≥", "27"), ("Qual a f√≥rmula da √°rea do tri√¢ngulo?", "base x altura √∑ 2"),
    ("Quanto √© 15% de 200?", "30"), ("Resolva: 7 x 9", "63"), ("Quanto √© 81 √∑ 9?", "9"),
    ("Qual a raiz c√∫bica de 27?", "3"), ("Resolva: 6¬≤", "36"), ("Quanto √© 11 x 11?", "121"),
    ("Resolva: 2¬≥", "8"), ("Quanto √© 25 √∑ 5?", "5"), ("Qual a f√≥rmula da √°rea do c√≠rculo?", "pi x raio¬≤"),
    ("Quanto √© 20% de 150?", "30"), ("Resolva: 9 x 6", "54"), ("Quanto √© 64 √∑ 8?", "8"),
    ("Qual a raiz quadrada de 169?", "13"), ("Resolva: 4¬≥", "64"), ("Quanto √© 14 x 5?", "70"),
    ("Quanto √© 90 √∑ 10?", "9"), ("Qual a raiz quadrada de 225?", "15"), ("Resolva: 10¬≤", "100"),
    ("Quanto √© 18 x 3?", "54"), ("Quanto √© 72 √∑ 8?", "9"), ("Qual a raiz quadrada de 196?", "14"),
    ("Resolva: 8¬≤", "64"), ("Quanto √© 13 x 7?", "91"), ("Quanto √© 120 √∑ 12?", "10"),
    ("Qual a raiz quadrada de 256?", "16"), ("Resolva: 9¬≤", "81"), ("Quanto √© 16 x 4?", "64"),
    ("Quanto √© 100 √∑ 25?", "4"), ("Qual a raiz quadrada de 100?", "10"), ("Resolva: 5¬≥", "125"),
    ("Quanto √© 6 x 7?", "42"), ("Quanto √© 81 √∑ 3?", "27"), ("Qual a raiz quadrada de 289?", "17"),
    ("Resolva: 11¬≤", "121"), ("Quanto √© 8 x 8?", "64"), ("Quanto √© 144 √∑ 12?", "12"),
    ("Qual a raiz quadrada de 324?", "18"), ("Resolva: 12¬≤", "144"), ("Quanto √© 9 x 5?", "45"),
    ("Quanto √© 36 √∑ 6?", "6"), ("Qual a raiz quadrada de 49?", "7"), ("Resolva: 7¬≤", "49"),
    ("Quanto √© 10 x 10?", "100"), ("Quanto √© 30 √∑ 5?", "6")
]

# üéÆ Interface do Jogo
class JogoMatematica:
    def __init__(self, root):
        self.root = root
        self.root.title("RPG de Matem√°tica")
        self.root.geometry("800x600")  # üìê Janela maior
        self.FONTE = ("Arial", 14)     # üî† Fonte padr√£o
        self.personagem = None
        self.pergunta_atual = None
        self.tempo_restante = 60
        self.timer_label = None
        self.timer_id = None
        self.frame_inicio()

    def frame_inicio(self):
        self.clear()
        tk.Label(self.root, text="Nome do personagem:", font=self.FONTE).pack(pady=5)
        self.nome_entry = tk.Entry(self.root, font=self.FONTE)
        self.nome_entry.pack(pady=5)

        tk.Label(self.root, text="Escolha sua classe:", font=self.FONTE).pack(pady=5)
        self.classe_var = tk.StringVar(value="Guerreiro")
        for classe in ["Guerreiro", "Mago", "Arqueiro"]:
            tk.Radiobutton(self.root, text=classe, variable=self.classe_var, value=classe, font=self.FONTE).pack()

        tk.Button(self.root, text="Iniciar Jogo", font=self.FONTE, command=self.iniciar_jogo).pack(pady=10)

    def iniciar_jogo(self):
        nome = self.nome_entry.get()
        classe = self.classe_var.get()
        self.personagem = Personagem(nome, classe)
        self.frame_jogo()

    def frame_jogo(self):
        self.clear()
        self.status_label = tk.Label(self.root, text=self.status_text(), font=self.FONTE)
        self.status_label.pack(pady=5)

        self.pergunta_atual = random.choice(perguntas)
        tk.Label(self.root, text=self.pergunta_atual[0], font=self.FONTE).pack(pady=10)
        self.resposta_entry = tk.Entry(self.root, font=self.FONTE)
        self.resposta_entry.pack(pady=5)
        tk.Button(self.root, text="Responder", font=self.FONTE, command=self.verificar_resposta).pack(pady=10)

        self.tempo_restante = 60
        self.timer_label = tk.Label(self.root, text=f"‚è≥ Tempo restante: {self.tempo_restante}s", font=self.FONTE)
        self.timer_label.pack(pady=5)
        self.atualizar_timer()

    def atualizar_timer(self):
        self.timer_label.config(text=f"‚è≥ Tempo restante: {self.tempo_restante}s")
        if self.tempo_restante > 0:
            self.tempo_restante -= 1
            self.timer_id = self.root.after(1000, self.atualizar_timer)
        else:
            self.verificar_resposta(timeout=True)

    def verificar_resposta(self, timeout=False):
        if self.timer_id:
            self.root.after_cancel(self.timer_id)

        if timeout:
            self.personagem.vida -= 20
            resultado = f"‚è∞ Tempo esgotado! Resposta correta: {self.pergunta_atual[1]}"
        else:
            resposta = self.resposta_entry.get().strip().lower()
            correta = self.pergunta_atual[1].strip().lower()
            if resposta == correta:
                self.personagem.pontos += 10
                if self.personagem.pontos % 50 == 0:
                    self.personagem.upgrade()
                resultado = "‚úÖ Correto!"
            else:
                self.personagem.vida -= 20
                resultado = f"‚ùå Errado! Resposta correta: {self.pergunta_atual[1]}"
        self.frame_resultado(resultado)

    def frame_resultado(self, resultado):
        self.clear()
        tk.Label(self.root, text=resultado, font=self.FONTE).pack(pady=10)
        tk.Label(self.root, text=self.status_text(), font=self.FONTE).pack(pady=5)
        if self.personagem.vida <= 0:
            tk.Label(self.root, text="üíÄ Game Over!", font=self.FONTE).pack(pady=10)
        else:
            tk.Button(self.root, text="Pr√≥xima Pergunta", font=self.FONTE, command=self.frame_jogo).pack(pady=10)

    def status_text(self):
        p = self.personagem
        return f"{p.nome} | Classe: {p.classe} | N√≠vel: {p.nivel} | Pontos: {p.pontos} | Vida: {p.vida}"

    def clear(self):
        for widget in self.root.winfo_children():
            widget.destroy()

# üöÄ Executar o jogo
root = tk.Tk()
app = JogoMatematica(root)
root.mainloop()
